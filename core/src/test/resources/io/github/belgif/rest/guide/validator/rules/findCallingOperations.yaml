openapi: 3.0.0
info:
  title: Logo schemas
  version: "1.0"
paths:
  /myCallingPath:
    get:
      operationId: myPath
      description: myDescription
      parameters:
        - name: myFirstParam
          in: path
          required: true
          schema:
            $ref: '#/components/schemas/MyParamObject'
      responses:
        200:
          $ref: '#/components/responses/MyFirstResponse'
  /myOtherPath:
    get:
      operationId: myOtherPath
      description: otherDescription
      responses:
        200:
          $ref: '#/components/responses/MyFirstResponse'
    post:
      operationId: post
      description: otherPost
      requestBody:
        required: true
        description: uhuh
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/MyObject'
      responses:
        200:
          $ref: '#/components/responses/MyFirstResponse'

  /pathWithAllOf:
    get:
      operationId: pathWithAllOf
      description: descriptive sentence
      responses:
        200:
          description: yes
          content:
            application/json:
              schema:
                $ref: "#/components/schemas/FirstImplementation"

components:
  responses:
    MyFirstResponse:
      description: this is my description
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MyObject'
  schemas:
    MyObject:
      type: object
      properties:
        innerObject:
          $ref: '#/components/schemas/MyChildObject'
    MyChildObject:
      type: object
      properties:
        name:
          type: string
    MyParamObject:
      type: string
    BaseSchema:
      type: object
      properties:
        myFirstProperty:
          type: string
        mySecondProperty:
          type: string
    EncapsulatingSchema:
      type: object
      description: yes
      required:
        - type
      allOf:
        - $ref: "#/components/schemas/BaseSchema"
      properties:
        type:
          type: string
          enum:
            - "first"
            - "second"
            - "third"
      discriminator:
        propertyName: type
        mapping:
          "first": FirstImplementation
          "second": SecondImplementation
          "third": ThirdImplementation
    FirstImplementation:
      type: object
      allOf:
        - $ref: "#/components/schemas/EncapsulatingSchema"
      properties:
        firstThing:
          type: string
    SecondImplementation:
      type: object
      allOf:
        - $ref: "#/components/schemas/EncapsulatingSchema"
      properties:
        secondThing:
          type: string
    ThirdImplementation:
      type: object
      allOf:
        - $ref: "#/components/schemas/EncapsulatingSchema"
      properties:
        thirdThing:
          type: string