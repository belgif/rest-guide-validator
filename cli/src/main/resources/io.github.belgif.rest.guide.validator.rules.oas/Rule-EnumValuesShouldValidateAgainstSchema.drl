package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import io.github.belgif.rest.guide.validator.core.util.SchemaValidator;
import io.github.belgif.rest.guide.validator.core.ViolationReport;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
import org.eclipse.microprofile.openapi.models.media.Schema;
import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import java.util.Map;

function void violationEnumValuesShouldValidateAgainstSchema(ViolationReport oas, SchemaDefinition schema, Map.Entry violation){
    oas.addViolation("[oas-enum]",
    "Enum value is not valid against the schema in which it is defined.", "[" + violation.getKey() + "] " + violation.getValue(), schema);
}

rule "Enum values should validate against schema"
    when
        $schema: SchemaDefinition($schemaType: /model/type)
        Schema(enumeration != null) from $schema.getModel()
        $violation: Map.Entry() from SchemaValidator.getEnumViolations($schema)
    then
        violationEnumValuesShouldValidateAgainstSchema(oas, $schema, $violation);
end