package io.github.belgif.rest.guide.validator.rules.oas;

import io.github.belgif.rest.guide.validator.core.ApiFunctions;
import io.github.belgif.rest.guide.validator.core.ViolationReport
import org.eclipse.microprofile.openapi.models.PathItem.HttpMethod;
import org.eclipse.microprofile.openapi.models.responses.APIResponse;
import org.eclipse.microprofile.openapi.models.media.MediaType;
import org.eclipse.microprofile.openapi.models.media.Schema;
import io.github.belgif.rest.guide.validator.core.ViolationLevel;
import io.github.belgif.rest.guide.validator.core.model.OperationDefinition;
import io.github.belgif.rest.guide.validator.core.model.ResponseDefinition;
import io.github.belgif.rest.guide.validator.core.model.OpenApiDefinition.DefinitionType;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
global io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult parserResult;

function String referenceName() {
  return "/Problem";
}

function void violationDefaultProblemResponseSchema(ViolationReport oas, ResponseDefinition response){
  oas.addViolation("[prb-defaul]",
    "Default problem response SHOULD use the Problem schema of belgif-openapi-problem ($ref to a schema type named Problem)", null,
    response, ViolationLevel.RECOMMENDED);
}

rule "Should use ProblemResponse schema for default responses oas3 or inline responseDefinition"
  when
    $operation: OperationDefinition(method != HttpMethod.HEAD && method != HttpMethod.OPTIONS)
    OperationDefinition($response: /model/responses/APIResponses/entrySet[key#String == "default"]/value#APIResponse) from $operation
    $responseDefinition: ResponseDefinition() from parserResult.resolve($response)
    eval( parserResult.oasVersion != 2 || $responseDefinition.getDefinitionType() == DefinitionType.INLINE )
    ResponseDefinition($schema: /model/content/mediaTypes/entrySet[key#String == "application/problem+json"]/value#MediaType/schema) from $responseDefinition
    Schema( ref == null || !ref.contains(referenceName()) ) from $schema
  then
    violationDefaultProblemResponseSchema(oas, $responseDefinition);
end

// For OAS2 this seperate rule is necessary because the top level responses in OAS2 do not contain any mediatypes. So in this case the schema that is present will io checked, regardless of the mediaType
rule "Should use ProblemResponse schema for default responses oas2 and toplevel responseDefinition"
  when
    eval( parserResult.oasVersion == 2 )
    $operation: OperationDefinition(method != HttpMethod.HEAD && method != HttpMethod.OPTIONS)
    OperationDefinition($response: /model/responses/APIResponses/entrySet[key#String == "default"]/value#APIResponse) from $operation
    $responseDefinition: ResponseDefinition() from parserResult.resolve($response)
    eval( $responseDefinition.getDefinitionType() != DefinitionType.INLINE )
    ResponseDefinition($schema: /model/content/mediaTypes/entrySet/value#MediaType/schema) from $responseDefinition
    Schema( ref == null || !ref.contains(referenceName()) ) from $schema
  then
    violationDefaultProblemResponseSchema(oas, $responseDefinition);
end