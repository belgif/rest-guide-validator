package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import io.github.belgif.rest.guide.validator.core.ApiFunctions
import io.github.belgif.rest.guide.validator.core.ViolationReport;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
import org.eclipse.microprofile.openapi.models.media.Schema;
import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import java.util.Set;

function Set excludeCodes() {
  return Set.of("BelgianRegionCode");
}

function void violationCodesShouldBeLowerCamelCase(ViolationReport oas, SchemaDefinition schema){
    oas.addViolation("[cod-design]",
    "New code types SHOULD be represented as string values in lowerCamelCase.", schema);
}

rule "Codes should be lowerCamelCase"
    when
        $schema: SchemaDefinition($schemaType: /model/type, ApiFunctions.isNotInSet(identifier, excludeCodes()))
        SchemaType( equals(SchemaType.STRING) ) from $schemaType
        Schema( enumeration != null ) from $schema.getModel()
        String(
          ((!this.contains("sort") && !this.contains("Sort")) && !ApiFunctions.isLowerCamelCase($schema.getModel().getEnumeration()))
          || (( this.contains("sort") || this.contains("Sort")) && !ApiFunctions.isLowerCamelCase($schema.getModel().getEnumeration(), "-"))
        ) from $schema.getEffectiveIdentifier()
    then
        violationCodesShouldBeLowerCamelCase(oas, $schema);
end