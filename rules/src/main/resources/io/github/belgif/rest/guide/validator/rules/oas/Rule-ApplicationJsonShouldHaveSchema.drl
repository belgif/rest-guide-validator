package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import io.github.belgif.rest.guide.validator.core.ApiFunctions;
import static io.github.belgif.rest.guide.validator.core.ApiFunctions.isMediaTypeIncluded;
import io.github.belgif.rest.guide.validator.core.ViolationReport;
import org.eclipse.microprofile.openapi.models.Operation;
import org.eclipse.microprofile.openapi.models.parameters.RequestBody;
import org.eclipse.microprofile.openapi.models.Paths;
import org.eclipse.microprofile.openapi.models.media.Content;
import org.eclipse.microprofile.openapi.models.media.MediaType;
import org.eclipse.microprofile.openapi.models.media.Schema;
import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;
import org.eclipse.microprofile.openapi.models.responses.APIResponses;
import org.eclipse.microprofile.openapi.models.responses.APIResponse;
import java.util.List
import java.util.Set;
import java.util.Map.Entry;
import io.github.belgif.rest.guide.validator.core.model.MediaTypeDefinition;

global io.github.belgif.rest.guide.validator.core.ViolationReport oas;


function void violationJsonRequestOrResponseHasNoSchema(ViolationReport oas, MediaTypeDefinition mediaTypeDefinition){
  oas.addViolation("[evo-object]",
    "In a request or response body, if any, you MUST always return a JSON object (and not e.g. an array) as a top level data structure to support future extensibility.",
    mediaTypeDefinition);
}

rule "Application/Json should always have a schema (OAS3)"
  when
    $mediaTypeDefinition : MediaTypeDefinition(/model[schema == null])
    eval(isMediaTypeIncluded($mediaTypeDefinition.getIdentifier(), Set.of("application/json")))
  then
    violationJsonRequestOrResponseHasNoSchema(oas, $mediaTypeDefinition);
end

