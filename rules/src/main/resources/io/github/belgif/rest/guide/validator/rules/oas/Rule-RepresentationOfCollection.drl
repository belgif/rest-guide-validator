package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import io.github.belgif.rest.guide.validator.core.ApiFunctions
import io.github.belgif.rest.guide.validator.core.OpenApiViolationAggregator
import io.github.belgif.rest.guide.validator.core.ViolationType;
import io.github.belgif.rest.guide.validator.core.model.PathDefinition;
import io.github.belgif.rest.guide.validator.core.model.OperationDefinition;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import io.github.belgif.rest.guide.validator.core.model.MediaTypeDefinition;
import io.github.belgif.rest.guide.validator.core.model.ResponseDefinition;
import io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult;
global io.github.belgif.rest.guide.validator.core.OpenApiViolationAggregator oas;
global io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult parserResult;
import org.eclipse.microprofile.openapi.models.responses.APIResponse;
import org.eclipse.microprofile.openapi.models.media.MediaType;
import org.eclipse.microprofile.openapi.models.PathItem;
import org.eclipse.microprofile.openapi.models.Operation
import java.util.function.Predicate
import org.eclipse.microprofile.openapi.models.media.Schema;
import java.util.Set;

function void representationOfCollectionViolation(OpenApiViolationAggregator oas, OperationDefinition operation){
    oas.addViolation("[col-repres]",
           		 "A query on a collection MUST contain an items property with an array of objects, each one representing an item in the collection.", "Schema (or subschema for allOf/oneOf/anyOf) of the values in the items array should be of type object",
           		 operation);
}

function void representationOfCollectionArrayViolation(OpenApiViolationAggregator oas, OperationDefinition operation){
    oas.addViolation("[col-repres]",
           		 "A query on a collection MUST contain an items property with an array of objects, each one representing an item in the collection.", "Response does not contain a property 'items' of type array.",
           		 operation);
}

function boolean hasItemsArray(Schema schema, ParserResult parserResult) {
    Predicate<SchemaDefinition> condition = (schemaDefinition) -> schemaDefinition.getModel().getProperties() != null &&
                    schemaDefinition.getModel().getProperties().containsKey("items") &&
                    schemaDefinition.getModel().getProperties().get("items").getType() != null &&
                    schemaDefinition.getModel().getProperties().get("items").getType().equals(Schema.SchemaType.ARRAY);
    return ApiFunctions.schemaMeetsCondition(schema, parserResult, condition);
}

function boolean hasCollectionResponse(Schema schema, ParserResult parserResult) {
    return ApiFunctions.schemaMeetsCondition(schema, parserResult, ApiFunctions.getCollectionResponseCondition(parserResult));
}

function boolean isObjectType(Schema schema, ParserResult parserResult) {
        Predicate<SchemaDefinition> condition = (schemaDefinition) -> ApiFunctions.isSchemaOfType(schemaDefinition.getModel(), Schema.SchemaType.OBJECT, parserResult);
        return ApiFunctions.schemaMeetsCondition(schema, parserResult, condition);
}

rule "Rule-Representation Of Collection should have items property of type array"
    when
       $path: PathDefinition($operation: /model/GET)
       eval( ApiFunctions.existsPathWithPathParamAfter($path.getIdentifier(), parserResult) )
       $operationDefinition: OperationDefinition($response: /model/responses/APIResponses/entrySet[key#String == "200"]/value#APIResponse) from parserResult.resolve($operation)
       ResponseDefinition($contentType: /model/content/mediaTypes/entrySet/key#String) from parserResult.resolve($response)
       eval( ApiFunctions.isMediaTypeIncluded($contentType, Set.of("application/json")) )
       ResponseDefinition($responseSchema: /model/content/mediaTypes/entrySet[key#String == $contentType]/value#MediaType/schema) from parserResult.resolve($response)
       eval( isObjectType($responseSchema, parserResult) )
       eval( !hasItemsArray($responseSchema, parserResult) )
    then
        representationOfCollectionArrayViolation(oas, $operationDefinition);
end

rule "Rule-Representation Of Collection items in a collection should be of type object"
    when
       $path: PathDefinition($operation: /model/GET)
       eval( ApiFunctions.existsPathWithPathParamAfter($path.getIdentifier(), parserResult) )
       $operationDefinition: OperationDefinition($response: /model/responses/APIResponses/entrySet[key#String == "200"]/value#APIResponse) from parserResult.resolve($operation)
       ResponseDefinition($contentType: /model/content/mediaTypes/entrySet/key#String) from parserResult.resolve($response)
       eval( ApiFunctions.isMediaTypeIncluded($contentType, Set.of("application/json")) )
       ResponseDefinition($responseSchema: /model/content/mediaTypes/entrySet[key#String == $contentType]/value#MediaType/schema) from parserResult.resolve($response)
       eval( isObjectType($responseSchema, parserResult) )
       eval( hasItemsArray($responseSchema, parserResult) )
       eval( !hasCollectionResponse($responseSchema, parserResult) )
    then
        representationOfCollectionViolation(oas, $operationDefinition);
end