package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import io.github.belgif.rest.guide.validator.core.ApiFunctions
import io.github.belgif.rest.guide.validator.core.ViolationReport;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
global io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult parserResult;
import org.eclipse.microprofile.openapi.models.media.Schema;
import org.eclipse.microprofile.openapi.models.media.Schema.SchemaType;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import io.github.belgif.rest.guide.validator.core.model.OpenApiDefinition;
import io.github.belgif.rest.guide.validator.core.ViolationLevel;
import java.util.List;

function void violationOneOfSubSchemaOfOtherTypeThanObject(ViolationReport oas, SchemaDefinition schema, OpenApiDefinition<Schema> oneOfSubSchema){
    oas.addViolation("[cod-design]",
    "oneOf SHOULD NOT be used for schemas with a type other than object", "references <<" + oneOfSubSchema.getPrintableJsonPointer() + ">> in a oneOf schema, but is of type <<" + oneOfSubSchema.getModel().getType() + ">>", schema, ViolationLevel.RECOMMENDED);
}

rule "OneOf Should Not Be Of Type Other Than Object"
    when
        $schemaDefinition: SchemaDefinition($oneOf: /model/oneOf#List, $oneOf != null)
        $subSchemaDef: SchemaDefinition(model.type != null && model.type != SchemaType.OBJECT) from parserResult.resolve($oneOf)
    then
        violationOneOfSubSchemaOfOtherTypeThanObject(oas, $schemaDefinition, $subSchemaDef);
end