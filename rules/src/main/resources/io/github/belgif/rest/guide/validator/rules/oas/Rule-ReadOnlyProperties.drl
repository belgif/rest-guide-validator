package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import org.eclipse.microprofile.openapi.models.media.Schema;
import io.github.belgif.rest.guide.validator.core.ApiFunctions;
import io.github.belgif.rest.guide.validator.core.ViolationReport;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import io.github.belgif.rest.guide.validator.core.model.OpenApiDefinition;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
global io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult parserResult;
import io.github.belgif.rest.guide.validator.core.parser.Parser;
import io.github.belgif.rest.guide.validator.core.model.helper.PropertiesCollection;

function void violationReadOnlyProperties(ViolationReport oas, SchemaDefinition schema, String propertyName){
    oas.addViolation("[oas-rdonly]",
        "Properties marked as readOnly being true SHOULD NOT be in the required list of the defined schema.", "[readOnly property: " + propertyName + "] \t",
        schema);
}

rule "ReadOnly Properties"
    when
        $schema: SchemaDefinition(model.getRef() == null)
        PropertiesCollection($properties: getPropertyNames())  from ApiFunctions.getAllProperties($schema.getModel(), parserResult, null)
        $propertyKey: String() from $properties
        eval ( ApiFunctions.isPropertyRequiredAndReadOnly($schema, $propertyKey, parserResult) )
    then
        violationReadOnlyProperties(oas, $schema, $propertyKey);
end