package io.github.belgif.rest.guide.validator.rules.oas;

import io.github.belgif.rest.guide.validator.core.ApiFunctions
import io.github.belgif.rest.guide.validator.core.ViolationReport;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
import java.util.Set;
import io.github.belgif.rest.guide.validator.core.model.ParameterDefinition;
import io.github.belgif.rest.guide.validator.core.model.ResponseDefinition;
import org.eclipse.microprofile.openapi.models.parameters.Parameter;
import org.eclipse.microprofile.openapi.models.parameters.Parameter.In
import io.github.belgif.rest.guide.validator.core.parser.Parser;

function Set excludeHeaders() {
  return Set.of("ETag", "traceparent", "tracestate", "WWW-Authenticate", "BelGov-*", "Accept-CH", "Sec-CH-*", "Sec-WebSocket-*", "baggage");
}

function void violationRequestHeaderParam(ViolationReport oas, ParameterDefinition parameterDefinition, String headerName){
  oas.addViolation("[hdr-case]",
    "By convention, HTTP headers SHOULD use Kebab-Case with uppercase for readability and consistency. ", "HTTP Header name: ["+headerName+"]",
    parameterDefinition);
}

function void violationResponseHeaderParam(ViolationReport oas, ResponseDefinition headerDefinition, String headerName){
  oas.addViolation("[hdr-case]",
    "By convention, HTTP headers SHOULD use Kebab-Case with uppercase for readability and consistency.", "HTTP Header name: ["+headerName+"]",
    headerDefinition);
}

rule "RequestHeader parameter should be Upper-Kebab-Case"
  when
    $parameterDefinition: ParameterDefinition($in: /model/in)
    Parameter.In(this.equals(In.HEADER)) from $in
    ParameterDefinition($parameterName: /model/name, ApiFunctions.isNotInSet($parameterName, excludeHeaders()) && !ApiFunctions.isUpperKebabCase($parameterName)) from $parameterDefinition
  then
    violationRequestHeaderParam(oas, $parameterDefinition, $parameterName);
end

rule "ResponseHeader should be Upper-Kebab-Case"
  when
    $response: ResponseDefinition($headerName: /model/headers/keySet#String, ApiFunctions.isNotInSet($headerName, excludeHeaders()) && !ApiFunctions.isUpperKebabCase($headerName))
  then
    violationResponseHeaderParam(oas, $response, $headerName);
end
