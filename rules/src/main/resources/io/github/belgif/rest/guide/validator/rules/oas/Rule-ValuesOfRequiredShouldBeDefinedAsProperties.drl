package io.github.belgif.rest.guide.validator.rules.oas;

import org.eclipse.microprofile.openapi.models.OpenAPI;
import org.eclipse.microprofile.openapi.models.media.Schema;
import io.github.belgif.rest.guide.validator.core.ApiFunctions;
import io.github.belgif.rest.guide.validator.core.ViolationReport;
import io.github.belgif.rest.guide.validator.core.model.SchemaDefinition;
import io.github.belgif.rest.guide.validator.core.model.OpenApiDefinition;
global io.github.belgif.rest.guide.validator.core.ViolationReport oas;
global io.github.belgif.rest.guide.validator.core.parser.Parser.ParserResult parserResult;
import io.github.belgif.rest.guide.validator.core.parser.Parser;
import io.github.belgif.rest.guide.validator.core.model.helper.PropertiesCollection;

function void violationRequiredProperties(ViolationReport oas, SchemaDefinition schema, String requiredValue){
    oas.addViolation("[propertyReq]",
        "Value is in the required list of a schema but is not defined as a property", "[Value: " + requiredValue +"]",
        schema);
}

rule "Values of required should be defined as properties"
    when
        $schema: SchemaDefinition(isHighLevelSchema())
        $required: String() from ApiFunctions.getRequiredProperties($schema, parserResult)
        not PropertiesCollection( containsProperty($required) ) from ApiFunctions.getAllProperties($schema.getModel(), parserResult, null)
    then
        violationRequiredProperties(oas, $schema, $required);
end