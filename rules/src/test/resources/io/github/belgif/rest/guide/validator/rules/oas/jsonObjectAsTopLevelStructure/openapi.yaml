openapi: 3.0.1
info:
  title: TestCase
  description: Here all the request and responsebodies are of type object
  version: '1.0'
servers:
  - url: '/api/v1'
paths:
  /properInlineResponse:
    get:
      operationId: getProperInlineResponse
      responses:
        '200':
          description: Very good response
          content:
            application/json:
              schema:
                type: object
        default:
          $ref: '#/components/responses/ProblemResponse'
  /properRefResponse:
    get:
      operationId: getProperRefResponse
      responses:
        default:
          $ref: '#/components/responses/ProblemResponse'
  /properRequestBody:
    post:
      operationId: properRequestBody
      requestBody:
        content:
          application/json:
            schema:
              type: object
        required: true
      responses:
        "201":
          description: Created
  /properNestedRequestBody:
    post:
      operationId: properNestedRequestBody
      requestBody:
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/NestedResponseOne'
  /properNestedResponseSchema:
    get:
      operationId: nestedResponseSchema
      responses:
        default:
          content:
            application/json:
             schema:
               $ref: '#/components/schemas/NestedResponseOne'
components:
  schemas:
    NestedResponseOne:
      description: first layer of nesting
      $ref: '#/components/schemas/NestedResponseTwo'
    NestedResponseTwo:
      oneOf:
        - $ref: '#/components/schemas/OneOfResponseOne'
        - $ref: '#/components/schemas/OneOfResponseTwo'
        - $ref: '#/components/schemas/AllOfResponse'
        - $ref: '#/components/schemas/AnyOfResponse'
    AnyOfResponse:
      anyOf:
        - $ref: '#/components/schemas/OneOfResponseOne'
        - $ref: '#/components/schemas/AllOfResponse'
    OneOfResponseOne:
      type: object
    OneOfResponseTwo:
      type: object
    AllOfResponse:
      allOf:
        - $ref: '#/components/schemas/AllOfResponseOne'
        - $ref: '#/components/schemas/AllOfResponseTwo'
    AllOfResponseOne:
      type: object
    AllOfResponseTwo:
      type: array
    Problem:
      description: A Problem Details object (RFC 7807)
      type: object
      properties:
        type:
          type: string
          format: uri
          description: An absolute URI that identifies the problem type
          default: about:blank  # kept for backwards-compatibility, type will be mandatory in problem-v2
        href:
          type: string
          format: uri
          description: An absolute URI that, when dereferenced, provides human-readable documentation for the problem type (e.g. using HTML).
        title:
          type: string
          description: A short summary of the problem type. Written in English and readable for engineers (usually not suited for non technical stakeholders and not localized).
          example: Service Unavailable
        status:
          type: integer
          format: int32
          description: The HTTP status code generated by the origin server for this occurrence of the problem.
          minimum: 400
          maximum: 600
          exclusiveMaximum: true
          example: 503
        detail:
          type: string
          description: A human-readable explanation specific to this occurrence of the problem
        instance:
          type: string
          format: uri
          description: An absolute URI that identifies the specific occurrence of the problem. It may or may not yield further information if dereferenced.
      example:
        {
          "type": "urn:problem-type:belgif:payloadTooLarge",
          "href": "https://www.belgif.be/specification/rest/api-guide/problems/payloadTooLarge.html", # location of linked doc will change in the future to recommended URI structure
          "title": "Payload Too Large",
          "status": 413,
          "detail": "Request message must not be larger than 10 MB",
          "instance": "urn:uuid:123e4567-e89b-12d3-a456-426614174000",
          "limit": 10485760  # additional properties specific to the problem type are allowed
        }
  responses:
    ProblemResponse:
      content:
        application/problem+json:
          schema:
            $ref: "#/components/schemas/Problem"
      description: a problem
