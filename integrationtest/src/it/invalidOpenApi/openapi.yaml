openapi: 3.0.0
info:
  title: REST reference implementation
  description: This is the reference implementation of a REST API following the G-Cloud style guide.
  version: v1
tags:
  - name: Logos
servers:
  - url: /demo/v1
paths:
  /logos:
    post:
#      Note! This method is not implemented and will always return status 201!
      description: Upload a new logo
      operationId: uploadLogo
      tags:
        - Logos
      requestBody:
        required: true
        content:
          multipart/form-data:
            schema:
              $ref: 'schemas/logo.yaml#/components/schemas/Logo'
            encoding:
              image:
                contentType: image/png, image/jpeg
      responses:
        "201":
          description: Logo uploaded
        default:
          "$ref": "schemas/belgif/problem/v1/problem-v1.yaml#/components/responses/ProblemResponse"
    get:
      description: See list of image metadata
      operationId: getLogos
      tags:
        - Logos
      responses:
        "200":
          description: successful operation
          content:
            application/json:
              schema:
                $ref: 'schemas/logo.yaml#/components/schemas/Logos'
        default:
          $ref: 'schemas/belgif/problem/v1/problem-v1.yaml#/components/responses/ProblemResponse'

  /logos/{id}/image:
    get:
      description: Dowload Logo Image
      operationId: downloadLogoImage
      tags: [Logos]
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[\w-]+$
      responses:
        "200":
          description: image data
          content:
          # media type image/* isn't supported by openapi generator
            image/png:
              schema:
                type: string
                format: binary
            image/jpeg:
              schema:
                type: string
                format: binary
        default:
          "$ref": "schemas/belgif/problem/v1/problem-v1.yaml#/components/responses/ProblemResponse"
  /logos/{id}/meta:
    get:
      description: get logo metadata
      operationId: getLogoMetaData
      tags:
        - Logos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[\w-]+$
      responses:
        "200":
          description: the logo metadata
          content:
            application/json:
              schema:
                $ref: 'schemas/logo.yaml#/components/schemas/LogoMetaData'
        default:
          "$ref": "schemas/belgif/problem/v1/problem-v1.yaml#/components/responses/ProblemResponse"
  /logos/{id}:
    get:
      description: Download logo
      operationId: downloadLogo
      tags:
        - Logos
      parameters:
        - name: id
          in: path
          required: true
          schema:
            type: string
            pattern: ^[\w-]+$
        - name: Accept
          in: header
          required: false
          schema:
            type: string
      responses:
        "200":
          description: the logo with metadata
          content:
            multipart/form-data:
              schema:
                $ref: 'schemas/logo.yaml#/components/schemas/Logo'
              encoding:
                image:
                  contentType: image/png, image/jpeg
        default:
          "$ref": "schemas/belgif/problem/v1/problem-v1.yaml#/components/responses/ProblemResponse"
components:
  schemas:
    HealthStatus:
      type: object
      required:
        - status
      properties:
        status:
          type: string
          description: "Level indicating the health status of the service: UP (functioning
            as expected), DOWN (suffering unexpected failures), DEGRADED (partly
            unavailable but service can be continued with reduced
            functionality), or a custom status value"
        details:
          type: string
      description: Response message for the API health
